"""
Elliot Greenlee
2017-11-29
UTK COSC 528 Project 5
"""

import os
import numpy as np
from sklearn import svm
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score

from ionosphere import Ionosphere
from sat import Sat
from vowel_context import VowelContext


def explore_data(data, data_results_directory):
    data_minimums = data.minimums()
    data_maximums = data.maximums()
    data_modes = data.modes()
    data_means = data.means()
    data_standard_deviations = data.standard_deviations()

    with open(os.path.join(data_results_directory, "stats"), 'w') as statsfile:
        statsfile.write("Minimums\n")
        statsfile.write("{}\n".format(data_minimums))
        statsfile.write("\n")

        statsfile.write("Maximums\n")
        statsfile.write("{}\n".format(data_maximums))
        statsfile.write("\n")

        statsfile.write("Modes\n")
        statsfile.write("{}\n".format(data_modes))
        statsfile.write("\n")

        statsfile.write("Means\n")
        statsfile.write("{}\n".format(data_means))
        statsfile.write("\n")

        statsfile.write("Standard Deviations\n")
        statsfile.write("{}\n".format(data_standard_deviations))
        statsfile.write("\n")

    data.pca_graph(to_file=True, filename=os.path.join(data_results_directory, "pca_graph"))
    data.lda_graph(to_file=True, filename=os.path.join(data_results_directory, "lda_graph"))
    data.boxplot(to_file=True, filename=os.path.join(data_results_directory, "boxplot"))


def main():
    """Main Function"""
    random_seed = 30

    folds = 5

    # Setup results directory
    results_directory = "results"
    if not os.path.exists(results_directory):
        os.makedirs(results_directory)

    """Ionosphere Data"""
    # Setup results directory
    ionosphere_results_directory = os.path.join(results_directory, "ionosphere")
    if not os.path.exists(ionosphere_results_directory):
        os.makedirs(ionosphere_results_directory)

    # Load Data
    ionosphere = Ionosphere()

    # Explore Data
    explore_data(ionosphere, ionosphere_results_directory)

    # Setup Data
    ionosphere.train_test_split(0.2, shuffle=True, random_state=random_seed)
    ionosphere.standardize()

    with open(os.path.join(ionosphere_results_directory, "svm"), 'w') as svmfile:
        # Coarse parameter grid search
        parameters = {'kernel': ('linear', 'poly', 'rbf', 'sigmoid'),
                      'C': [i for i in range(1, 100)],
                      'gamma': [i for i in [100.0, 30.0, 10.0, 3.0, 1.0, 0.3, 0.1, 0.03, 0.01, 0.003, 0.001, 0.0003,
                                            0.0001, 0.00003, 0.00001, 0.000003, 0.000001]]}
        ionosphere_svm_estimator = svm.SVC()
        clf = GridSearchCV(ionosphere_svm_estimator, parameters, cv=folds, scoring='accuracy')
        clf.fit(ionosphere.training_x, ionosphere.training_y.ravel())

        svmfile.write("Coarse Search Best Parameters\n")
        svmfile.write("{}\n".format(clf.best_params_))
        svmfile.write("\n")

        # Fine parameter grid search
        parameters = {'C': [i for i in np.arange(7.0, 9.0, 0.1)],
                      'gamma': [i for i in np.arange(0.1, 1.0, 0.01)]}
        ionosphere_svm_estimator = svm.SVC(kernel='rbf')
        clf = GridSearchCV(ionosphere_svm_estimator, parameters, cv=folds, scoring='accuracy')
        clf.fit(ionosphere.training_x, ionosphere.training_y.ravel())

        svmfile.write("Fine Search Best Parameters\n")
        svmfile.write("{}\n".format(clf.best_params_))
        svmfile.write("\n")

        # Test Accuracy
        ionosphere_predicted_y = clf.predict(ionosphere.testing_x)
        ionosphere_accuracy = accuracy_score(ionosphere.testing_y.ravel(), ionosphere_predicted_y)

        svmfile.write("Testing Accuracy\n")
        svmfile.write("{}\n".format(ionosphere_accuracy))
        svmfile.write("\n")

    """Sat Data"""
    # Setup results directory
    sat_results_directory = os.path.join(results_directory, "sat")
    if not os.path.exists(sat_results_directory):
        os.makedirs(sat_results_directory)

    # Load Data
    sat = Sat()

    # Explore Data
    explore_data(sat, sat_results_directory)

    # Setup Data
    sat.train_test_split(2000, shuffle=False)  # Use splits generated by data files
    sat.standardize()

    with open(os.path.join(sat_results_directory, "svm"), 'w') as svmfile:
        # Coarse parameter grid search
        parameters = {'kernel': ('linear', 'poly', 'rbf', 'sigmoid'),
                      'C': [i for i in range(1, 100)],
                      'gamma': [i for i in [100.0, 30.0, 10.0, 3.0, 1.0, 0.3, 0.1, 0.03, 0.01, 0.003, 0.001, 0.0003,
                                            0.0001, 0.00003, 0.00001, 0.000003, 0.000001]]}
        sat_svm_estimator = svm.SVC()
        clf = GridSearchCV(sat_svm_estimator, parameters, cv=folds, scoring='accuracy')
        clf.fit(sat.training_x, sat.training_y.ravel())

        svmfile.write("Coarse Search Best Parameters\n")
        svmfile.write("{}\n".format(clf.best_params_))
        svmfile.write("\n")

        # Fine parameter grid search
        parameters = {'C': [i for i in np.arange(11.0, 13.0, 0.1)],
                      'gamma': [i for i in np.arange(0.003, 0.03, 0.0001)]}
        sat_svm_estimator = svm.SVC(kernel='rbf')
        clf = GridSearchCV(sat_svm_estimator, parameters, cv=folds, scoring='accuracy')
        clf.fit(sat.training_x, sat.training_y.ravel())

        svmfile.write("Fine Search Best Parameters\n")
        svmfile.write("{}\n".format(clf.best_params_))
        svmfile.write("\n")

        # Test Accuracy
        sat_predicted_y = clf.predict(sat.testing_x)
        sat_accuracy = accuracy_score(sat.testing_y.ravel(), sat_predicted_y)

        svmfile.write("Testing Accuracy\n")
        svmfile.write("{}\n".format(sat_accuracy))
        svmfile.write("\n")

    """Vowel-context Data"""
    # Setup results directory
    vowel_context_results_directory = os.path.join(results_directory, "vowel-context")
    if not os.path.exists(vowel_context_results_directory):
        os.makedirs(vowel_context_results_directory)

    # Load Data
    vowel_context = VowelContext()

    # Explore Data
    explore_data(vowel_context, vowel_context_results_directory)

    # Setup Data
    vowel_context.train_test_split(0.2, shuffle=True, random_state=random_seed)
    vowel_context.standardize()

    with open(os.path.join(vowel_context_results_directory, "svm"), 'w') as svmfile:
        # Coarse parameter grid search
        parameters = {'kernel': ('linear', 'poly', 'rbf', 'sigmoid'),
                      'C': [i for i in range(1, 100)],
                      'gamma': [i for i in
                                [100.0, 30.0, 10.0, 3.0, 1.0, 0.3, 0.1, 0.03, 0.01, 0.003, 0.001, 0.0003, 0.0001,
                                 0.00003, 0.00001, 0.000003, 0.000001]]}
        vowel_context_svm_estimator = svm.SVC()
        clf = GridSearchCV(vowel_context_svm_estimator, parameters, cv=folds, scoring='accuracy')
        clf.fit(vowel_context.training_x, vowel_context.training_y.ravel())

        svmfile.write("Coarse Search Best Parameters\n")
        svmfile.write("{}\n".format(clf.best_params_))
        svmfile.write("\n")

        # Fine parameter grid search
        parameters = {'C': [i for i in np.arange(21.0, 23.0, 0.1)],
                      'gamma': [i for i in np.arange(0.03, 0.3, 0.001)]}
        vowel_context_svm_estimator = svm.SVC(kernel='rbf')
        clf = GridSearchCV(vowel_context_svm_estimator, parameters, cv=folds, scoring='accuracy')
        clf.fit(vowel_context.training_x, vowel_context.training_y.ravel())

        svmfile.write("Fine Search Best Parameters\n")
        svmfile.write("{}\n".format(clf.best_params_))
        svmfile.write("\n")

        # Test Accuracy
        vowel_context_predicted_y = clf.predict(vowel_context.testing_x)
        vowel_context_accuracy = accuracy_score(vowel_context.testing_y.ravel(), vowel_context_predicted_y)

        svmfile.write("Testing Accuracy\n")
        svmfile.write("{}\n".format(vowel_context_accuracy))
        svmfile.write("\n")


if __name__ == "__main__":
    main()
